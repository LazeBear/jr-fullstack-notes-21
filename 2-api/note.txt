TCP (transmission control protocol)
UDP (User datagram protocol)

osi model


A -> B


预期
1,2,3 -> 1,2,3
可能会发生的
1,2,3 -> 1,3 (UDP)
1,2,3 -> 3,1,2 (UDP)
1,2,3 -> 1,2,3 (TCP)



HTTP 5 versions
0.9 只能GET，获取数据，数据类型只能是html
1.0 支持任何格式
1.1 加入持久连接
2
3

tcp连接 3次握手和4次挥手

https

s -> security -> tls -> transport layer security


https://www.example.com:8080
host = hostname + port = www.example.com:8080
hostname = www.example.com
domain = example.com
origin = protocol + host = https://www.example.com:8080

ip whitelist


https://www.google.com/search?q=image


CRUD operations
Create Read Update Delete
POST   GET  PUT    DELETE
            PATCH
增删改查

OPEN/PUBLIC API

OAuth

Preflight request
CORS (cross - origin - resource - sharing)
localhost:3000 -> localhost:5000

access-control-allow-headers
access-control-allow-methods
access-control-allow-origin

log + monitoring



trailing comma


Restful API 设计规范
1. versioning 版本
/api/v1/resources
api.example.com/v1/users   -> {username:'xxx'} -> deprecate
api.example.com/v2/users   -> {user: 'xxx'}
v1.example.com/api/

2. 用名词来描述资源（resource），并且使用复数形式
/api/v1/users
/api/v1/accounts
/api/v1/orders

3. 用相应的http method来描述操作
GET -> 获取数据
POST -> 创建，添加数据

4. url路径的设计上，可以使用嵌套结构
/api/v1/users/{userId}/posts/{postId}
/api/v1/users/:userId
user object
{
 id: 'xxx',
 posts: []
}

5. 使用相应的http status code（状态码）来表示请求的结果
200 -> OK
201 -> Created

6. 注意返回的大小，尽量进行分页
/api/v1/users?page=1&pageSize=10
/api/v1/users?page=2&pageSize=10
10000
(path -> query -> query param)

7. 返回可读的错误信息
status code
400
'Bad Request'

400
{
  error: "Invalid password format, expecting at least one lower case and at least one upper case"
}

{
  error: "10001"
}



default
{
  data: xxxx,
  error: xxxx
}

Success
{
  data: xxxx,
}

fail
{
  error: xxxx,
}



Success
[]

fail
error message



/assignments/{assignmentId}